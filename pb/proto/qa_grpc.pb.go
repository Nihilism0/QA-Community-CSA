// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: qa.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreateQuestionClient is the client API for CreateQuestion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateQuestionClient interface {
	CreateQuestion(ctx context.Context, in *QcreateReq, opts ...grpc.CallOption) (*QcreateResp, error)
}

type createQuestionClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateQuestionClient(cc grpc.ClientConnInterface) CreateQuestionClient {
	return &createQuestionClient{cc}
}

func (c *createQuestionClient) CreateQuestion(ctx context.Context, in *QcreateReq, opts ...grpc.CallOption) (*QcreateResp, error) {
	out := new(QcreateResp)
	err := c.cc.Invoke(ctx, "/qa.CreateQuestion/CreateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateQuestionServer is the server API for CreateQuestion service.
// All implementations must embed UnimplementedCreateQuestionServer
// for forward compatibility
type CreateQuestionServer interface {
	CreateQuestion(context.Context, *QcreateReq) (*QcreateResp, error)
	mustEmbedUnimplementedCreateQuestionServer()
}

// UnimplementedCreateQuestionServer must be embedded to have forward compatible implementations.
type UnimplementedCreateQuestionServer struct {
}

func (UnimplementedCreateQuestionServer) CreateQuestion(context.Context, *QcreateReq) (*QcreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedCreateQuestionServer) mustEmbedUnimplementedCreateQuestionServer() {}

// UnsafeCreateQuestionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateQuestionServer will
// result in compilation errors.
type UnsafeCreateQuestionServer interface {
	mustEmbedUnimplementedCreateQuestionServer()
}

func RegisterCreateQuestionServer(s grpc.ServiceRegistrar, srv CreateQuestionServer) {
	s.RegisterService(&CreateQuestion_ServiceDesc, srv)
}

func _CreateQuestion_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QcreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateQuestionServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.CreateQuestion/CreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateQuestionServer).CreateQuestion(ctx, req.(*QcreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateQuestion_ServiceDesc is the grpc.ServiceDesc for CreateQuestion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateQuestion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qa.CreateQuestion",
	HandlerType: (*CreateQuestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _CreateQuestion_CreateQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qa.proto",
}

// CreateAnswerClient is the client API for CreateAnswer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateAnswerClient interface {
	CreateAnswer(ctx context.Context, in *AcreateReq, opts ...grpc.CallOption) (*AcreateResp, error)
}

type createAnswerClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateAnswerClient(cc grpc.ClientConnInterface) CreateAnswerClient {
	return &createAnswerClient{cc}
}

func (c *createAnswerClient) CreateAnswer(ctx context.Context, in *AcreateReq, opts ...grpc.CallOption) (*AcreateResp, error) {
	out := new(AcreateResp)
	err := c.cc.Invoke(ctx, "/qa.CreateAnswer/CreateAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateAnswerServer is the server API for CreateAnswer service.
// All implementations must embed UnimplementedCreateAnswerServer
// for forward compatibility
type CreateAnswerServer interface {
	CreateAnswer(context.Context, *AcreateReq) (*AcreateResp, error)
	mustEmbedUnimplementedCreateAnswerServer()
}

// UnimplementedCreateAnswerServer must be embedded to have forward compatible implementations.
type UnimplementedCreateAnswerServer struct {
}

func (UnimplementedCreateAnswerServer) CreateAnswer(context.Context, *AcreateReq) (*AcreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswer not implemented")
}
func (UnimplementedCreateAnswerServer) mustEmbedUnimplementedCreateAnswerServer() {}

// UnsafeCreateAnswerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateAnswerServer will
// result in compilation errors.
type UnsafeCreateAnswerServer interface {
	mustEmbedUnimplementedCreateAnswerServer()
}

func RegisterCreateAnswerServer(s grpc.ServiceRegistrar, srv CreateAnswerServer) {
	s.RegisterService(&CreateAnswer_ServiceDesc, srv)
}

func _CreateAnswer_CreateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateAnswerServer).CreateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.CreateAnswer/CreateAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateAnswerServer).CreateAnswer(ctx, req.(*AcreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateAnswer_ServiceDesc is the grpc.ServiceDesc for CreateAnswer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateAnswer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qa.CreateAnswer",
	HandlerType: (*CreateAnswerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnswer",
			Handler:    _CreateAnswer_CreateAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qa.proto",
}
